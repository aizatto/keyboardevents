{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","keycodes","setKeycodes","useEffect","listener","e","console","log","newKeycodes","concat","id","Date","getTime","key","code","keyCode","ctrlKey","shiftKey","metaKey","altKey","window","addEventListener","removeEventListener","lis","Array","from","reverse","map","index","className","args","objectWithoutProperties","react_default","a","createElement","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAkFeA,EArEO,WAAM,IAAAC,EACMC,mBAAe,IADrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnBK,EADmBH,EAAA,GACTI,EADSJ,EAAA,GAG1BK,oBAAU,WACR,IAAMC,EAAW,SAACC,GAChBC,QAAQC,IAAIF,GACZ,IAAMG,EAAcP,EAASQ,OAAO,CAClC,CACEC,IAAI,IAAIC,MAAOC,UACfC,IAAKR,EAAEQ,IACPC,KAAMT,EAAES,KACRC,QAASV,EAAEU,QACXC,QAASX,EAAEW,QACXC,SAAUZ,EAAEY,SACZC,QAASb,EAAEa,QACXC,OAAQd,EAAEc,UAGdjB,EAAYM,IAKd,OAFAY,OAAOC,iBAAiB,UAAWjB,GAE5B,WACLgB,OAAOE,oBAAoB,UAAWlB,MAI1C,IAAMmB,EAAMC,MAAMC,KAAKxB,GAAUyB,UAAUC,IAAI,SAACtB,EAAGuB,GACjD,IAAMC,EAAsB,IAAVD,EACd,wBACA,GAEUE,GAAQzB,EAAfK,GALoDX,OAAAgC,EAAA,EAAAhC,CAKrCM,EALqC,SAM3D,OACE2B,EAAAC,EAAAC,cAAA,MAAIrB,IAAKR,EAAEK,GAAImB,UAAWA,GACxBG,EAAAC,EAAAC,cAAA,UAAKJ,EAAKjB,KACVmB,EAAAC,EAAAC,cAAA,UAAKJ,EAAKhB,MACVkB,EAAAC,EAAAC,cAAA,UAAKJ,EAAKf,SACViB,EAAAC,EAAAC,cAAA,UAAKJ,EAAKd,QAAU,OAAS,IAC7BgB,EAAAC,EAAAC,cAAA,UAAKJ,EAAKb,SAAW,OAAS,IAC9Be,EAAAC,EAAAC,cAAA,UAAKJ,EAAKZ,QAAU,OAAS,IAC7Bc,EAAAC,EAAAC,cAAA,UAAKJ,EAAKX,OAAS,OAAS,OAKlC,OACEa,EAAAC,EAAAC,cAAA,OAAKL,UAAU,iBACbG,EAAAC,EAAAC,cAAA,SAAOL,UAAU,uBACfG,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,sBAGJF,EAAAC,EAAAC,cAAA,aACGX,MC/DSY,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOR,EAAAC,EAAAC,cAACO,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ae3e1755.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\n\ninterface KE {\n  id: number,\n  key: string,\n  code: string,\n  keyCode: number,\n  ctrlKey: boolean,\n  shiftKey: boolean,\n  metaKey: boolean,\n  altKey: boolean,\n}\n\nconst App: React.FC = () => {\n  const [keycodes, setKeycodes] = useState<KE[]>([]);\n\n  useEffect(() => {\n    const listener = (e: KeyboardEvent) => {\n      console.log(e);\n      const newKeycodes = keycodes.concat([\n        {\n          id: new Date().getTime(),\n          key: e.key,\n          code: e.code,\n          keyCode: e.keyCode,\n          ctrlKey: e.ctrlKey,\n          shiftKey: e.shiftKey,\n          metaKey: e.metaKey,\n          altKey: e.altKey,\n        }\n      ]);\n      setKeycodes(newKeycodes);\n    };\n\n    window.addEventListener('keydown', listener);\n\n    return () => {\n      window.removeEventListener('keydown', listener);\n    };\n  });\n\n  const lis = Array.from(keycodes).reverse().map((e, index) => {\n    const className = index === 0\n      ? 'border border-success'\n      : '';\n\n    const {id, ...args} = e;\n    return (\n      <tr key={e.id} className={className}>\n        <td>{args.key}</td>\n        <td>{args.code}</td>\n        <td>{args.keyCode}</td>\n        <td>{args.ctrlKey ? 'true' : ''}</td>\n        <td>{args.shiftKey ? 'true' : ''}</td>\n        <td>{args.metaKey ? 'true' : ''}</td>\n        <td>{args.altKey ? 'true' : ''}</td>\n      </tr>\n    );\n  });\n\n  return (\n    <div className=\"App container\">\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>key</th>\n            <th>code</th>\n            <th>keyCode</th>\n            <th>ctrlKey</th>\n            <th>shiftKey</th>\n            <th>metaKey</th>\n            <th>altKey</th>\n          </tr>\n        </thead>\n        <tbody>\n          {lis}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}